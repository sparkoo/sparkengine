package main

import (
	"fmt"
	"github.com/sparkoo/sparkengine/scene"
	"github.com/sparkoo/sparkengine/scene/image"
	"log"
	"os"
	"path/filepath"
)

func main() {
	srcImage, dstFile := handleArgs(os.Args)

	log.Println("reading image ...")

	resultFile, err := os.Create(dstFile)
	panicErr(err)
	defer resultFile.Close()

	writePixels(resultFile, image.LoadFullImage(srcImage))

	log.Println("done")
	log.Println("function saved at ", dstFile)
}

func handleArgs(args []string) (srcImage string, dstFile string) {
	if len(os.Args) != 3 {
		log.Fatal("expected 2 args. piximp [source_image] [dest_file]")
	}

	srcImage, err := filepath.Abs(args[1])
	panicErr(err)

	dstFile, err = filepath.Abs(args[2])
	panicErr(err)

	return
}

func panicErr(err error) {
	if err != nil {
		panic(err)
	}
}

func writePixels(resFile *os.File, pixels []scene.Pixel) {
	size := len(pixels)
	writeLine(resFile, "package main")
	writeLine(resFile, "")
	writeLine(resFile, "import \"github.com/sparkoo/sparkengine/scene\"")
	writeLine(resFile, "")
	writeLine(resFile, "// function generated by piximp tool")
	writeLine(resFile, "func initPixels() []scene.Pixel {")
	writeLine(resFile, fmt.Sprintf("\tpixels := make([]scene.Pixel, %d)", size))

	for pi, p := range pixels {
		writeLine(
			resFile, fmt.Sprintf("\tpixels[%v] = scene.NewPixel(%d, %d, scene.Color{%d, %d, %d, %d})",
				pi, p.X, p.Y, p.Color[scene.COLOR_R], p.Color[scene.COLOR_G], p.Color[scene.COLOR_B], p.Color[scene.COLOR_A]))
	}
	writeLine(resFile, "\treturn pixels")
	writeLine(resFile, "}")
}

func writeLine(file *os.File, line string) {
	_, err := file.WriteString(line + "\n")
	panicErr(err)
}
